#BlueJ class context
comment0.target=Field
comment0.text=\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\n\ Each\ position\ is\ able\ to\ store\ a\ single\ animal.\n\ \n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling\n\ @author\ Konrad\ Bylina\ [K20014050]\ &\ Matt\ Stanbrell\ [K21044080]\n\ @version\ 2022.03.02\n
comment1.params=depth\ width
comment1.target=Field(int,\ int)
comment1.text=\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\n\ \n\ @param\ depth\ The\ depth\ of\ the\ field.\n\ @param\ width\ The\ width\ of\ the\ field.\n
comment10.params=location
comment10.target=Location\ randomAdjacentLocation(Location)
comment10.text=\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\n\ given\ location,\ or\ is\ the\ same\ location.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ \n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\n
comment11.params=location
comment11.target=java.util.List\ getFreeAdjacentLocations(Location)
comment11.text=\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\n\ \n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\n
comment12.params=location
comment12.target=Location\ freeAdjacentLocation(Location)
comment12.text=\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\n\ given\ location.\ If\ there\ is\ none,\ return\ null.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ \n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\n
comment13.params=location
comment13.target=java.util.List\ adjacentLocations(Location)
comment13.text=\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\n\ The\ list\ will\ not\ include\ the\ location\ itself.\n\ All\ locations\ will\ lie\ within\ the\ grid.\n\ \n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\n
comment14.params=radius\ location
comment14.target=java.util.List\ locationsWithinOf(int,\ Location)
comment14.text=\n\ Return\ a\ list\ of\ locations\ within\ a\ specified\ distance\ from\ location\n\ including\ the\ location.\ \n\ \n\ @param\ radius\ \ \ \ \ \ \ \ distance\ from\ central\ location\n\ @param\ location\ \ \ \ \ \ central\ location\n
comment15.params=
comment15.target=int\ getDepth()
comment15.text=\n\ Return\ the\ depth\ of\ the\ field.\n\ \n\ @return\ The\ depth\ of\ the\ field.\n
comment16.params=
comment16.target=int\ getWidth()
comment16.text=\n\ Return\ the\ width\ of\ the\ field.\n\ \n\ @return\ The\ width\ of\ the\ field.\n
comment2.params=
comment2.target=void\ clear()
comment2.text=\n\ Empty\ the\ field.\n
comment3.params=location
comment3.target=void\ clear(Location)
comment3.text=\n\ Clear\ the\ given\ location.\n\ \n\ @param\ location\ The\ location\ to\ clear.\n
comment4.params=animal\ row\ col
comment4.target=void\ place(java.lang.Object,\ int,\ int)
comment4.text=\n\ Place\ an\ animal\ at\ the\ given\ location.\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\n\ be\ lost.\n\ \n\ @param\ animal\ The\ animal\ to\ be\ placed.\n\ @param\ row\ \ \ \ Row\ coordinate\ of\ the\ location.\n\ @param\ col\ \ \ \ Column\ coordinate\ of\ the\ location.\n
comment5.params=animal\ location
comment5.target=void\ place(java.lang.Object,\ Location)
comment5.text=\n\ Place\ an\ object\ at\ the\ given\ location.\n\ If\ there\ is\ already\ an\ object\ at\ the\ location\ it\ will\n\ be\ lost.\n\ \n\ @param\ animal\ \ \ The\ object\ to\ be\ placed.\n\ @param\ location\ Where\ to\ place\ the\ object.\n
comment6.params=location
comment6.target=java.lang.Object\ getObjectAt(Location)
comment6.text=\n\ Return\ the\ object\ at\ the\ given\ location,\ if\ any.\n\ \n\ @param\ location\ Where\ in\ the\ field.\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment7.params=location
comment7.target=Organism\ getOrganismAt(Location)
comment7.text=\n\ Return\ the\ organism\ at\ the\ given\ location,\ if\ any\n\ \n\ @param\ location\ \ Location\ to\ be\ checked\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ The\ organism\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment8.params=location
comment8.target=Animal\ getAnimalAt(Location)
comment8.text=\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any\n\ Specifically\ only\ for\ checking\ if\ an\ animal\ object\n\ is\ at\ a\ certain\ location\n\ \n\ @param\ location\ \ Location\ to\ be\ checked\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment9.params=row\ col
comment9.target=java.lang.Object\ getObjectAt(int,\ int)
comment9.text=\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\n\ \n\ @param\ row\ The\ desired\ row.\n\ @param\ col\ The\ desired\ column.\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
numComments=17
